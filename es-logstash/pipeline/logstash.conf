input {
  file {
    path => ["D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/input.3.service.txt"]
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => plain { charset => "UTF-8" }
    mode => "read"
    file_completed_action => "log"
    file_completed_log_path => "D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/completed_files.log"
  }
}

filter {
  # Parse CSV với dấu phân cách là ;
  csv {
    separator => ";"
    columns => ["orderCode", "serviceCode", "subService", "serviceId"]
    skip_header => true
  }

  # Chuyển 3 trường này thành mảng
  ruby {
    code => "
      ['serviceCode', 'subService', 'serviceId'].each do |field|
        val = event.get(field)
        if val.is_a?(String)
          if val.strip.empty?
            event.set(field, [])
          elsif val.include?(',')
            event.set(field, val.split(',').map(&:strip))
          else
            event.set(field, [val.strip])
          end
        else
          event.set(field, [])
        end
      end
    "
  }

  # Xóa các trường không cần thiết của Logstash
  mutate {
    remove_field => ["@version", "@timestamp", "host", "path", "message"]
  }
}

output {
  if [orderCode] {
    elasticsearch {
      hosts => ["http://103.21.149.190:9200"]
      index => "orders_import"
      document_id => "%{orderCode}"  # đảm bảo không trùng ID
      action => "update"             # cập nhật nếu có, tạo mới nếu không
      doc_as_upsert => true
      user => "elastic"
      password => "M6a5K2XgHhWJYAZUsGF4mRc"
    }

    # Ghi log lỗi parse CSV vào file riêng
    if "_csvparsefailure" in [tags] {
      file {
        path => "D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/error.log"
        codec => json_lines
      }
    }

    stdout { codec => rubydebug }
  }
}

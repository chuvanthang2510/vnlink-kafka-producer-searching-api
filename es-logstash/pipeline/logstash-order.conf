input {
  file {
    path => ["D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/input1.txt"]
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => plain { charset => "UTF-8" }
    mode => "read"
    file_completed_action => "log"
    file_completed_log_path => "D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/completed_files.log"
  }
}


filter {
  # Parse CSV với dấu phân cách là ;
  csv {
    separator => ";"
    columns => [
      "orderCode", "createdDate", "saleChannelId", "agentId",
      "customerName", "customerMobile", "customerEmail", "customerId",
      "paymentStatus", "agentPaymentStatus"
    ]
    skip_header => true
  }

  # Xử lý ngày tháng
  date {
    match => ["createdDate", "dd-MMM-yy hh.mm.ss.SSSSSSSSS a"]
    target => "orderDate"
    timezone => "Asia/Ho_Chi_Minh"
  }

  ruby {
      code => "
        if event.get('orderDate')
          time = event.get('orderDate').time rescue nil
          if time
            formatted = time.strftime('%d/%m/%Y %H:%M:%S')
            event.set('orderDate', formatted)
          end
        end
      "
    }


  # Tạo email prefix từ customerEmail
  ruby {
    code => "
      email = event.get('customerEmail')
      if email.is_a?(String) && email.include?('@')
        prefix = email.split('@')[0]
        event.set('emailPrefix', prefix)
      else
        event.set('emailPrefix', nil)
      end
    "
  }

  # Xử lý các trường list
  ruby {
    code => "
      # Chuyển đổi các trường đơn thành list nếu cần
      ['serviceType', 'serviceCode', 'serviceId' , 'subService'].each do |field|
        if event.get(field) && !event.get(field).is_a?(Array)
          event.set(field, [event.get(field)])
        end
      end
    "
  }

  # Tách mảng số điện thoại

  ruby {
    code => "
      mobile = event.get('customerMobile')
      if mobile.is_a?(String)
        if mobile.strip.empty?
          event.set('customerMobile', [])
        elsif mobile.include?(',')
          event.set('customerMobile', mobile.split(',').map(&:strip))
        else
          event.set('customerMobile', [mobile.strip])
        end
      else
        event.set('customerMobile', [])
      end
    "
  }


  # Thêm các trường mặc định nếu chưa có
  mutate {
    add_field => {
      "orderStatus" => "NEW"
      "customerCareId" => ""
      "serviceMobile" => ""
      "serviceType" => []
      "serviceCode" => []
      "serviceId" => []
      "subService" => []
    }
  }

  # Xóa các trường không cần thiết
  mutate {
    remove_field => ["@version", "@timestamp", "host", "path", "message"]
  }
}


output {
  if [orderCode] {
    elasticsearch {
      hosts => ["http://103.21.149.190:9200"]
      index => "orders_import"
      document_id => "%{orderCode}"  # đảm bảo không tạo trùng ID
      user => "elastic"
      password => "M6a5K2XgHhWJYAZUsGF4mRc"
    }

    # Log lỗi nếu có
    if "_csvparsefailure" in [tags] {
      file {
        path => "D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/error.log"
        codec => json
      }
    }

    stdout { codec => rubydebug }
  }
}

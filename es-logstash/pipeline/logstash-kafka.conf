input {
  kafka {
    bootstrap_servers => "localhost:9092"
    topics => ["order_push"]
    group_id => "logstash_order_group"
    codec => "json"  # Đọc luôn message Kafka kiểu JSON
    auto_offset_reset => "earliest"
  }
}

filter {
  # Chuẩn hóa lại trường createdDate nếu cần
  date {
    match => ["createdDate", "dd/MM/yyyy HH:mm:ss"]
    target => "createdDate"
    timezone => "Asia/Ho_Chi_Minh"
  }

  ruby {
    code => "
      if event.get('createdDate')
        time = event.get('createdDate').time rescue nil
        if time
          formatted = time.strftime('%d/%m/%Y %H:%M:%S')
          event.set('createdDate', formatted)
        end
      end
    "
  }

  # Trích xuất emailPrefix
  ruby {
    code => "
      email = event.get('customerEmail')
      if email.is_a?(String) && email.include?('@')
        prefix = email.split('@')[0]
        event.set('emailPrefix', prefix)
      else
        event.set('emailPrefix', nil)
      end
    "
  }

  # Đảm bảo services là mảng (đã là mảng thì bỏ qua)
  ruby {
    code => "
      services = event.get('services')
      unless services.is_a?(Array)
        event.set('services', [services])
      end
    "
  }

  # Xóa các trường không cần thiết
  mutate {
    remove_field => ["@version", "@timestamp", "host", "path"]
  }
}

output {
  if [orderCode] {
    elasticsearch {
      hosts => ["http://103.21.149.190:9200"]
      index => "orders_import"
      document_id => "%{orderCode}"
      user => "elastic"
      password => "M6a5K2XgHhWJYAZUsGF4mRc"
    }

    stdout { codec => rubydebug }
  } else {
    file {
      path => "D:/APISearch-Java-ES-Logstash-Kafka-Docker/es-logstash/data/error.log"
      codec => json
    }
  }
}
